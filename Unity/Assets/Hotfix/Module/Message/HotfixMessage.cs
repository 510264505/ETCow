// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    /// <summary>
    /// 帐号
    /// </summary>
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 帐号
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TestHotfixMessage : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TestHotfixMessage> _parser = new pb::MessageParser<G2C_TestHotfixMessage>(() => (G2C_TestHotfixMessage)MessagePool.Instance.Fetch(typeof(G2C_TestHotfixMessage)));
    public static pb::MessageParser<G2C_TestHotfixMessage> Parser { get { return _parser; } }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestActorRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestActorRequest> _parser = new pb::MessageParser<C2M_TestActorRequest>(() => (C2M_TestActorRequest)MessagePool.Instance.Fetch(typeof(C2M_TestActorRequest)));
    public static pb::MessageParser<C2M_TestActorRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestActorResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestActorResponse> _parser = new pb::MessageParser<M2C_TestActorResponse>(() => (M2C_TestActorResponse)MessagePool.Instance.Fetch(typeof(M2C_TestActorResponse)));
    public static pb::MessageParser<M2C_TestActorResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => (PlayerInfo)MessagePool.Instance.Fetch(typeof(PlayerInfo)));
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string userID_ = "";
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string headIcon_ = "";
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomCard_;
    public int RoomCard {
      get { return roomCard_; }
      set {
        roomCard_ = value;
      }
    }

    private int sex_;
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int state_;
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadIcon);
      }
      if (RoomCard != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomCard);
      }
      if (Sex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sex);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      if (RoomCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomCard);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = "";
      name_ = "";
      headIcon_ = "";
      roomCard_ = 0;
      sex_ = 0;
      state_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            HeadIcon = input.ReadString();
            break;
          }
          case 32: {
            RoomCard = input.ReadInt32();
            break;
          }
          case 40: {
            Sex = input.ReadInt32();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerInfo> _parser = new pb::MessageParser<C2G_PlayerInfo>(() => (C2G_PlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_PlayerInfo)));
    public static pb::MessageParser<C2G_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerInfo> _parser = new pb::MessageParser<G2C_PlayerInfo>(() => (G2C_PlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_PlayerInfo)));
    public static pb::MessageParser<G2C_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.PlayerInfo playerInfo_;
    public global::ETHotfix.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.PlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_testRepeatedString_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> testRepeatedString_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TestRepeatedString {
      get { return testRepeatedString_; }
      set { testRepeatedString_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_testRepeatedInt32_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> testRepeatedInt32_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TestRepeatedInt32 {
      get { return testRepeatedInt32_; }
      set { testRepeatedInt32_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_testRepeatedInt64_codec
        = pb::FieldCodec.ForInt64(42);
    private pbc::RepeatedField<long> testRepeatedInt64_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> TestRepeatedInt64 {
      get { return testRepeatedInt64_; }
      set { testRepeatedInt64_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      testRepeatedString_.WriteTo(output, _repeated_testRepeatedString_codec);
      testRepeatedInt32_.WriteTo(output, _repeated_testRepeatedInt32_codec);
      testRepeatedInt64_.WriteTo(output, _repeated_testRepeatedInt64_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      size += testRepeatedString_.CalculateSize(_repeated_testRepeatedString_codec);
      size += testRepeatedInt32_.CalculateSize(_repeated_testRepeatedInt32_codec);
      size += testRepeatedInt64_.CalculateSize(_repeated_testRepeatedInt64_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      testRepeatedString_.Clear();
      testRepeatedInt32_.Clear();
      testRepeatedInt64_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETHotfix.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 26: {
            testRepeatedString_.AddEntriesFrom(input, _repeated_testRepeatedString_codec);
            break;
          }
          case 34:
          case 32: {
            testRepeatedInt32_.AddEntriesFrom(input, _repeated_testRepeatedInt32_codec);
            break;
          }
          case 42:
          case 40: {
            testRepeatedInt64_.AddEntriesFrom(input, _repeated_testRepeatedInt64_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Test注册协议
  /// </summary>
  public partial class C2G_TestPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TestPlayerInfo> _parser = new pb::MessageParser<C2G_TestPlayerInfo>(() => (C2G_TestPlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_TestPlayerInfo)));
    public static pb::MessageParser<C2G_TestPlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TestPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TestPlayerInfo> _parser = new pb::MessageParser<G2C_TestPlayerInfo>(() => (G2C_TestPlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_TestPlayerInfo)));
    public static pb::MessageParser<G2C_TestPlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-----------------------------------------以下是牛牛协议-----------------------------------------
  ///登录
  /// </summary>
  public partial class C2R_CowCowLogin : pb::IMessage {
    private static readonly pb::MessageParser<C2R_CowCowLogin> _parser = new pb::MessageParser<C2R_CowCowLogin>(() => (C2R_CowCowLogin)MessagePool.Instance.Fetch(typeof(C2R_CowCowLogin)));
    public static pb::MessageParser<C2R_CowCowLogin> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_CowCowLogin : pb::IMessage {
    private static readonly pb::MessageParser<R2C_CowCowLogin> _parser = new pb::MessageParser<R2C_CowCowLogin>(() => (R2C_CowCowLogin)MessagePool.Instance.Fetch(typeof(R2C_CowCowLogin)));
    public static pb::MessageParser<R2C_CowCowLogin> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册
  /// </summary>
  public partial class C2R_CowCowRegister : pb::IMessage {
    private static readonly pb::MessageParser<C2R_CowCowRegister> _parser = new pb::MessageParser<C2R_CowCowRegister>(() => (C2R_CowCowRegister)MessagePool.Instance.Fetch(typeof(C2R_CowCowRegister)));
    public static pb::MessageParser<C2R_CowCowRegister> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_CowCowRegister : pb::IMessage {
    private static readonly pb::MessageParser<R2C_CowCowRegister> _parser = new pb::MessageParser<R2C_CowCowRegister>(() => (R2C_CowCowRegister)MessagePool.Instance.Fetch(typeof(R2C_CowCowRegister)));
    public static pb::MessageParser<R2C_CowCowRegister> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录消息服务器
  /// </summary>
  public partial class C2G_CowCowLoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CowCowLoginGate> _parser = new pb::MessageParser<C2G_CowCowLoginGate>(() => (C2G_CowCowLoginGate)MessagePool.Instance.Fetch(typeof(C2G_CowCowLoginGate)));
    public static pb::MessageParser<C2G_CowCowLoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 帐号
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CowCowLoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CowCowLoginGate> _parser = new pb::MessageParser<G2C_CowCowLoginGate>(() => (G2C_CowCowLoginGate)MessagePool.Instance.Fetch(typeof(G2C_CowCowLoginGate)));
    public static pb::MessageParser<G2C_CowCowLoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string headIcon_ = "";
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int diamond_;
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadIcon);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sex);
      }
      if (Diamond != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Diamond);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      nickName_ = "";
      headIcon_ = "";
      sex_ = 0;
      diamond_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 26: {
            HeadIcon = input.ReadString();
            break;
          }
          case 32: {
            Sex = input.ReadInt32();
            break;
          }
          case 40: {
            Diamond = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class GamerInfo : pb::IMessage {
    private static readonly pb::MessageParser<GamerInfo> _parser = new pb::MessageParser<GamerInfo>(() => (GamerInfo)MessagePool.Instance.Fetch(typeof(GamerInfo)));
    public static pb::MessageParser<GamerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    private int coin_;
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string headIcon_ = "";
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int status_;
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    private int seatID_;
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Coin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Coin);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeadIcon);
      }
      if (Sex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sex);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Status);
      }
      if (SeatID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SeatID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      coin_ = 0;
      name_ = "";
      headIcon_ = "";
      sex_ = 0;
      status_ = 0;
      seatID_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Coin = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            HeadIcon = input.ReadString();
            break;
          }
          case 40: {
            Sex = input.ReadInt32();
            break;
          }
          case 48: {
            Status = input.ReadInt32();
            break;
          }
          case 56: {
            SeatID = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_CowCowCreateGameRoomGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CowCowCreateGameRoomGate> _parser = new pb::MessageParser<C2G_CowCowCreateGameRoomGate>(() => (C2G_CowCowCreateGameRoomGate)MessagePool.Instance.Fetch(typeof(C2G_CowCowCreateGameRoomGate)));
    public static pb::MessageParser<C2G_CowCowCreateGameRoomGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int bureau_;
    public int Bureau {
      get { return bureau_; }
      set {
        bureau_ = value;
      }
    }

    private int ruleBit_;
    public int RuleBit {
      get { return ruleBit_; }
      set {
        ruleBit_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Bureau != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bureau);
      }
      if (RuleBit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RuleBit);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Bureau != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bureau);
      }
      if (RuleBit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleBit);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      name_ = "";
      bureau_ = 0;
      ruleBit_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Bureau = input.ReadInt32();
            break;
          }
          case 32: {
            RuleBit = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CowCowCreateGameRoomGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CowCowCreateGameRoomGate> _parser = new pb::MessageParser<G2C_CowCowCreateGameRoomGate>(() => (G2C_CowCowCreateGameRoomGate)MessagePool.Instance.Fetch(typeof(G2C_CowCowCreateGameRoomGate)));
    public static pb::MessageParser<G2C_CowCowCreateGameRoomGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string gameName_ = "";
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int bureau_;
    public int Bureau {
      get { return bureau_; }
      set {
        bureau_ = value;
      }
    }

    private int ruleBit_;
    public int RuleBit {
      get { return ruleBit_; }
      set {
        ruleBit_ = value;
      }
    }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.GamerInfo gamerInfo_;
    public global::ETHotfix.GamerInfo GamerInfo {
      get { return gamerInfo_; }
      set {
        gamerInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameName);
      }
      if (Bureau != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bureau);
      }
      if (RuleBit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RuleBit);
      }
      if (RoomID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomID);
      }
      if (gamerInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GamerInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (Bureau != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bureau);
      }
      if (RuleBit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleBit);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      if (gamerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GamerInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameName_ = "";
      bureau_ = 0;
      ruleBit_ = 0;
      roomID_ = "";
      if (gamerInfo_ != null) MessagePool.Instance.Recycle(gamerInfo_); gamerInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameName = input.ReadString();
            break;
          }
          case 16: {
            Bureau = input.ReadInt32();
            break;
          }
          case 24: {
            RuleBit = input.ReadInt32();
            break;
          }
          case 34: {
            RoomID = input.ReadString();
            break;
          }
          case 42: {
            if (gamerInfo_ == null) {
              gamerInfo_ = new global::ETHotfix.GamerInfo();
            }
            input.ReadMessage(gamerInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_CowCowJoinGameRoomGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CowCowJoinGameRoomGate> _parser = new pb::MessageParser<C2G_CowCowJoinGameRoomGate>(() => (C2G_CowCowJoinGameRoomGate)MessagePool.Instance.Fetch(typeof(C2G_CowCowJoinGameRoomGate)));
    public static pb::MessageParser<C2G_CowCowJoinGameRoomGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      roomID_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            RoomID = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CowCowJoinGameRoomGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CowCowJoinGameRoomGate> _parser = new pb::MessageParser<G2C_CowCowJoinGameRoomGate>(() => (G2C_CowCowJoinGameRoomGate)MessagePool.Instance.Fetch(typeof(G2C_CowCowJoinGameRoomGate)));
    public static pb::MessageParser<G2C_CowCowJoinGameRoomGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string gameName_ = "";
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int bureau_;
    public int Bureau {
      get { return bureau_; }
      set {
        bureau_ = value;
      }
    }

    private int ruleBit_;
    public int RuleBit {
      get { return ruleBit_; }
      set {
        ruleBit_ = value;
      }
    }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameName);
      }
      if (Bureau != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bureau);
      }
      if (RuleBit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RuleBit);
      }
      if (RoomID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomID);
      }
      if (UserID != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UserID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (Bureau != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bureau);
      }
      if (RuleBit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleBit);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameName_ = "";
      bureau_ = 0;
      ruleBit_ = 0;
      roomID_ = "";
      userID_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameName = input.ReadString();
            break;
          }
          case 16: {
            Bureau = input.ReadInt32();
            break;
          }
          case 24: {
            RuleBit = input.ReadInt32();
            break;
          }
          case 34: {
            RoomID = input.ReadString();
            break;
          }
          case 40: {
            UserID = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_CowCowJoinGameRoomGroupSend : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CowCowJoinGameRoomGroupSend> _parser = new pb::MessageParser<Actor_CowCowJoinGameRoomGroupSend>(() => (Actor_CowCowJoinGameRoomGroupSend)MessagePool.Instance.Fetch(typeof(Actor_CowCowJoinGameRoomGroupSend)));
    public static pb::MessageParser<Actor_CowCowJoinGameRoomGroupSend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.GamerInfo> _repeated_gamerInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.GamerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.GamerInfo> gamerInfo_ = new pbc::RepeatedField<global::ETHotfix.GamerInfo>();
    public pbc::RepeatedField<global::ETHotfix.GamerInfo> GamerInfo {
      get { return gamerInfo_; }
      set { gamerInfo_ = value; }
    }

    private int seatID_;
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      gamerInfo_.WriteTo(output, _repeated_gamerInfo_codec);
      if (SeatID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += gamerInfo_.CalculateSize(_repeated_gamerInfo_codec);
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < gamerInfo_.Count; i++) { MessagePool.Instance.Recycle(gamerInfo_[i]); }
      gamerInfo_.Clear();
      seatID_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gamerInfo_.AddEntriesFrom(input, _repeated_gamerInfo_codec);
            break;
          }
          case 16: {
            SeatID = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_CowCowGamerReady : pb::IMessage {
    private static readonly pb::MessageParser<C2M_CowCowGamerReady> _parser = new pb::MessageParser<C2M_CowCowGamerReady>(() => (C2M_CowCowGamerReady)MessagePool.Instance.Fetch(typeof(C2M_CowCowGamerReady)));
    public static pb::MessageParser<C2M_CowCowGamerReady> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int seatID_;
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomID);
      }
      if (SeatID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomID_ = "";
      seatID_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomID = input.ReadString();
            break;
          }
          case 16: {
            SeatID = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CowCowGamerReady : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CowCowGamerReady> _parser = new pb::MessageParser<M2C_CowCowGamerReady>(() => (M2C_CowCowGamerReady)MessagePool.Instance.Fetch(typeof(M2C_CowCowGamerReady)));
    public static pb::MessageParser<M2C_CowCowGamerReady> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_CowCowGamerReady : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CowCowGamerReady> _parser = new pb::MessageParser<Actor_CowCowGamerReady>(() => (Actor_CowCowGamerReady)MessagePool.Instance.Fetch(typeof(Actor_CowCowGamerReady)));
    public static pb::MessageParser<Actor_CowCowGamerReady> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_seatIDs_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> seatIDs_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SeatIDs {
      get { return seatIDs_; }
      set { seatIDs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      seatIDs_.WriteTo(output, _repeated_seatIDs_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += seatIDs_.CalculateSize(_repeated_seatIDs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIDs_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            seatIDs_.AddEntriesFrom(input, _repeated_seatIDs_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_CowCowRoomDealCards : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CowCowRoomDealCards> _parser = new pb::MessageParser<Actor_CowCowRoomDealCards>(() => (Actor_CowCowRoomDealCards)MessagePool.Instance.Fetch(typeof(Actor_CowCowRoomDealCards)));
    public static pb::MessageParser<Actor_CowCowRoomDealCards> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
      set { cards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      cards_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_CowCowGamerSubmitCardType : pb::IMessage {
    private static readonly pb::MessageParser<C2M_CowCowGamerSubmitCardType> _parser = new pb::MessageParser<C2M_CowCowGamerSubmitCardType>(() => (C2M_CowCowGamerSubmitCardType)MessagePool.Instance.Fetch(typeof(C2M_CowCowGamerSubmitCardType)));
    public static pb::MessageParser<C2M_CowCowGamerSubmitCardType> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int seatID_;
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    private int maxCard_;
    public int MaxCard {
      get { return maxCard_; }
      set {
        maxCard_ = value;
      }
    }

    private int cardType_;
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    private int flowerColor_;
    public int FlowerColor {
      get { return flowerColor_; }
      set {
        flowerColor_ = value;
      }
    }

    private int cowNumber_;
    public int CowNumber {
      get { return cowNumber_; }
      set {
        cowNumber_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(58);
    private pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
      set { cards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomID);
      }
      if (SeatID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatID);
      }
      if (MaxCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxCard);
      }
      if (CardType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardType);
      }
      if (FlowerColor != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FlowerColor);
      }
      if (CowNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CowNumber);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      if (MaxCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCard);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (FlowerColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlowerColor);
      }
      if (CowNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CowNumber);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomID_ = "";
      seatID_ = 0;
      maxCard_ = 0;
      cardType_ = 0;
      flowerColor_ = 0;
      cowNumber_ = 0;
      cards_.Clear();
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomID = input.ReadString();
            break;
          }
          case 16: {
            SeatID = input.ReadInt32();
            break;
          }
          case 24: {
            MaxCard = input.ReadInt32();
            break;
          }
          case 32: {
            CardType = input.ReadInt32();
            break;
          }
          case 40: {
            FlowerColor = input.ReadInt32();
            break;
          }
          case 48: {
            CowNumber = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CowCowGamerSubmitCardType : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CowCowGamerSubmitCardType> _parser = new pb::MessageParser<M2C_CowCowGamerSubmitCardType>(() => (M2C_CowCowGamerSubmitCardType)MessagePool.Instance.Fetch(typeof(M2C_CowCowGamerSubmitCardType)));
    public static pb::MessageParser<M2C_CowCowGamerSubmitCardType> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_CowCowGamerSubmitCardType : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CowCowGamerSubmitCardType> _parser = new pb::MessageParser<Actor_CowCowGamerSubmitCardType>(() => (Actor_CowCowGamerSubmitCardType)MessagePool.Instance.Fetch(typeof(Actor_CowCowGamerSubmitCardType)));
    public static pb::MessageParser<Actor_CowCowGamerSubmitCardType> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_seatIDs_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> seatIDs_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SeatIDs {
      get { return seatIDs_; }
      set { seatIDs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      seatIDs_.WriteTo(output, _repeated_seatIDs_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += seatIDs_.CalculateSize(_repeated_seatIDs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIDs_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            seatIDs_.AddEntriesFrom(input, _repeated_seatIDs_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class CowCowSmallSettlementInfo : pb::IMessage {
    private static readonly pb::MessageParser<CowCowSmallSettlementInfo> _parser = new pb::MessageParser<CowCowSmallSettlementInfo>(() => (CowCowSmallSettlementInfo)MessagePool.Instance.Fetch(typeof(CowCowSmallSettlementInfo)));
    public static pb::MessageParser<CowCowSmallSettlementInfo> Parser { get { return _parser; } }

    private int seatID_;
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
      set { cards_ = value; }
    }

    private int cardsType_;
    public int CardsType {
      get { return cardsType_; }
      set {
        cardsType_ = value;
      }
    }

    private int betCoin_;
    public int BetCoin {
      get { return betCoin_; }
      set {
        betCoin_ = value;
      }
    }

    private int loseWin_;
    public int LoseWin {
      get { return loseWin_; }
      set {
        loseWin_ = value;
      }
    }

    private int cowNumber_;
    public int CowNumber {
      get { return cowNumber_; }
      set {
        cowNumber_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatID);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (CardsType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardsType);
      }
      if (BetCoin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BetCoin);
      }
      if (LoseWin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LoseWin);
      }
      if (CowNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CowNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (CardsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsType);
      }
      if (BetCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetCoin);
      }
      if (LoseWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoseWin);
      }
      if (CowNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CowNumber);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatID_ = 0;
      cards_.Clear();
      cardsType_ = 0;
      betCoin_ = 0;
      loseWin_ = 0;
      cowNumber_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 24: {
            CardsType = input.ReadInt32();
            break;
          }
          case 32: {
            BetCoin = input.ReadInt32();
            break;
          }
          case 40: {
            LoseWin = input.ReadInt32();
            break;
          }
          case 48: {
            CowNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_CowCowRoomOpenCardsAndSettlement : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CowCowRoomOpenCardsAndSettlement> _parser = new pb::MessageParser<Actor_CowCowRoomOpenCardsAndSettlement>(() => (Actor_CowCowRoomOpenCardsAndSettlement)MessagePool.Instance.Fetch(typeof(Actor_CowCowRoomOpenCardsAndSettlement)));
    public static pb::MessageParser<Actor_CowCowRoomOpenCardsAndSettlement> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.CowCowSmallSettlementInfo> _repeated_smallSettlemntInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.CowCowSmallSettlementInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.CowCowSmallSettlementInfo> smallSettlemntInfo_ = new pbc::RepeatedField<global::ETHotfix.CowCowSmallSettlementInfo>();
    public pbc::RepeatedField<global::ETHotfix.CowCowSmallSettlementInfo> SmallSettlemntInfo {
      get { return smallSettlemntInfo_; }
      set { smallSettlemntInfo_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      smallSettlemntInfo_.WriteTo(output, _repeated_smallSettlemntInfo_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += smallSettlemntInfo_.CalculateSize(_repeated_smallSettlemntInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < smallSettlemntInfo_.Count; i++) { MessagePool.Instance.Recycle(smallSettlemntInfo_[i]); }
      smallSettlemntInfo_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            smallSettlemntInfo_.AddEntriesFrom(input, _repeated_smallSettlemntInfo_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
